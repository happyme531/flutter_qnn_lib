// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings for tokenizers_c API library.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class TokenizersBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TokenizersBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TokenizersBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// 创建tokenizer
  TokenizersStatus TokenizerCreateFromFile(
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<TokenizerHandle> handle,
  ) {
    return TokenizersStatus.fromValue(
      _TokenizerCreateFromFile(model_path, handle),
    );
  }

  late final _TokenizerCreateFromFilePtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<TokenizerHandle>,
      )
    >
  >('TokenizerCreateFromFile');
  late final _TokenizerCreateFromFile =
      _TokenizerCreateFromFilePtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<TokenizerHandle>)
      >();

  TokenizersStatus TokenizerCreateFromBlob(
    ffi.Pointer<ffi.Char> blob,
    int blob_size,
    TokenizerType type,
    ffi.Pointer<TokenizerHandle> handle,
  ) {
    return TokenizersStatus.fromValue(
      _TokenizerCreateFromBlob(blob, blob_size, type.value, handle),
    );
  }

  late final _TokenizerCreateFromBlobPtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<ffi.Char>,
        ffi.Size,
        ffi.UnsignedInt,
        ffi.Pointer<TokenizerHandle>,
      )
    >
  >('TokenizerCreateFromBlob');
  late final _TokenizerCreateFromBlob =
      _TokenizerCreateFromBlobPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<TokenizerHandle>,
        )
      >();

  /// 异步创建tokenizer
  void TokenizerCreateFromFileAsync(
    ffi.Pointer<ffi.Char> model_path,
    TokenizerCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _TokenizerCreateFromFileAsync(model_path, callback, user_data);
  }

  late final _TokenizerCreateFromFileAsyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Char>,
        TokenizerCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('TokenizerCreateFromFileAsync');
  late final _TokenizerCreateFromFileAsync =
      _TokenizerCreateFromFileAsyncPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Char>,
          TokenizerCallback,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void TokenizerCreateFromBlobAsync(
    ffi.Pointer<ffi.Char> blob,
    int blob_size,
    TokenizerType type,
    TokenizerCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _TokenizerCreateFromBlobAsync(
      blob,
      blob_size,
      type.value,
      callback,
      user_data,
    );
  }

  late final _TokenizerCreateFromBlobAsyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Char>,
        ffi.Size,
        ffi.UnsignedInt,
        TokenizerCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('TokenizerCreateFromBlobAsync');
  late final _TokenizerCreateFromBlobAsync =
      _TokenizerCreateFromBlobAsyncPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          TokenizerCallback,
          ffi.Pointer<ffi.Void>,
        )
      >();

  /// 销毁tokenizer
  void TokenizerDestroy(TokenizerHandle handle) {
    return _TokenizerDestroy(handle);
  }

  late final _TokenizerDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TokenizerHandle)>>(
        'TokenizerDestroy',
      );
  late final _TokenizerDestroy =
      _TokenizerDestroyPtr.asFunction<void Function(TokenizerHandle)>();

  /// encode接口
  TokenizersStatus TokenizerEncode(
    TokenizerHandle handle,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int32> tokens,
    ffi.Pointer<ffi.Size> num_tokens,
    int max_tokens,
  ) {
    return TokenizersStatus.fromValue(
      _TokenizerEncode(handle, text, tokens, num_tokens, max_tokens),
    );
  }

  late final _TokenizerEncodePtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        TokenizerHandle,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Int32>,
        ffi.Pointer<ffi.Size>,
        ffi.Size,
      )
    >
  >('TokenizerEncode');
  late final _TokenizerEncode =
      _TokenizerEncodePtr.asFunction<
        int Function(
          TokenizerHandle,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Size>,
          int,
        )
      >();

  /// decode接口
  TokenizersStatus TokenizerDecode(
    TokenizerHandle handle,
    ffi.Pointer<ffi.Int32> tokens,
    int num_tokens,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Size> text_len,
  ) {
    return TokenizersStatus.fromValue(
      _TokenizerDecode(handle, tokens, num_tokens, text, text_len),
    );
  }

  late final _TokenizerDecodePtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        TokenizerHandle,
        ffi.Pointer<ffi.Int32>,
        ffi.Size,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Size>,
      )
    >
  >('TokenizerDecode');
  late final _TokenizerDecode =
      _TokenizerDecodePtr.asFunction<
        int Function(
          TokenizerHandle,
          ffi.Pointer<ffi.Int32>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  TokenizersStatus TokenizerIdToToken(
    TokenizerHandle handle,
    int id,
    ffi.Pointer<ffi.Char> token,
    ffi.Pointer<ffi.Size> token_len,
  ) {
    return TokenizersStatus.fromValue(
      _TokenizerIdToToken(handle, id, token, token_len),
    );
  }

  late final _TokenizerIdToTokenPtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        TokenizerHandle,
        ffi.Int32,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Size>,
      )
    >
  >('TokenizerIdToToken');
  late final _TokenizerIdToToken =
      _TokenizerIdToTokenPtr.asFunction<
        int Function(
          TokenizerHandle,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  TokenizersStatus TokenizerTokenToId(
    TokenizerHandle handle,
    ffi.Pointer<ffi.Char> token,
    ffi.Pointer<ffi.Int32> id,
  ) {
    return TokenizersStatus.fromValue(_TokenizerTokenToId(handle, token, id));
  }

  late final _TokenizerTokenToIdPtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        TokenizerHandle,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Int32>,
      )
    >
  >('TokenizerTokenToId');
  late final _TokenizerTokenToId =
      _TokenizerTokenToIdPtr.asFunction<
        int Function(
          TokenizerHandle,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int32>,
        )
      >();

  TokenizersStatus TokenizerGetVocabSize(
    TokenizerHandle handle,
    ffi.Pointer<ffi.Size> vocab_size,
  ) {
    return TokenizersStatus.fromValue(
      _TokenizerGetVocabSize(handle, vocab_size),
    );
  }

  late final _TokenizerGetVocabSizePtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(TokenizerHandle, ffi.Pointer<ffi.Size>)
    >
  >('TokenizerGetVocabSize');
  late final _TokenizerGetVocabSize =
      _TokenizerGetVocabSizePtr.asFunction<
        int Function(TokenizerHandle, ffi.Pointer<ffi.Size>)
      >();

  /// 获取最后一次错误信息
  ffi.Pointer<ffi.Char> TokenizerGetLastError() {
    return _TokenizerGetLastError();
  }

  late final _TokenizerGetLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'TokenizerGetLastError',
      );
  late final _TokenizerGetLastError =
      _TokenizerGetLastErrorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

/// 错误码定义
enum TokenizersStatus {
  TOKENIZERS_OK(0),
  TOKENIZERS_ERROR(1),
  TOKENIZERS_INVALID_ARGUMENT(2),
  TOKENIZERS_OUT_OF_MEMORY(3);

  final int value;
  const TokenizersStatus(this.value);

  static TokenizersStatus fromValue(int value) => switch (value) {
    0 => TOKENIZERS_OK,
    1 => TOKENIZERS_ERROR,
    2 => TOKENIZERS_INVALID_ARGUMENT,
    3 => TOKENIZERS_OUT_OF_MEMORY,
    _ => throw ArgumentError("Unknown value for TokenizersStatus: $value"),
  };
}

enum TokenizerType {
  TOKENIZER_TYPE_HUGGINGFACE(0),
  TOKENIZER_TYPE_SENTENCEPIECE(1),
  TOKENIZER_TYPE_RWKV_WORLD(2);

  final int value;
  const TokenizerType(this.value);

  static TokenizerType fromValue(int value) => switch (value) {
    0 => TOKENIZER_TYPE_HUGGINGFACE,
    1 => TOKENIZER_TYPE_SENTENCEPIECE,
    2 => TOKENIZER_TYPE_RWKV_WORLD,
    _ => throw ArgumentError("Unknown value for TokenizerType: $value"),
  };
}

final class TokenizerHandle_ extends ffi.Opaque {}

/// Tokenizer句柄
typedef TokenizerHandle = ffi.Pointer<TokenizerHandle_>;

/// 异步回调函数类型定义
typedef TokenizerCallback =
    ffi.Pointer<ffi.NativeFunction<TokenizerCallbackFunction>>;
typedef TokenizerCallbackFunction =
    ffi.Void Function(
      ffi.UnsignedInt status,
      TokenizerHandle handle,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef DartTokenizerCallbackFunction =
    void Function(
      TokenizersStatus status,
      TokenizerHandle handle,
      ffi.Pointer<ffi.Void> user_data,
    );
