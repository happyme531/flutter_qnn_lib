// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/qnn_wrapper.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class QnnWrapperBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  QnnWrapperBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  QnnWrapperBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// 创建 QnnSampleApp 对象。
  /// 参数 backendPath 和 modelPath 为后端库及模型库文件路径，
  /// outputDataType 与 inputDataType 为数据类型枚举值。
  /// dataDir 为应用数据目录路径，用于切换工作目录。
  /// htpConfig 为HTP后端特定配置，如果不是HTP后端则忽略。
  /// 如果创建失败返回 NULL。
  ffi.Pointer<QnnSampleApp> qnn_sample_app_create(
    ffi.Pointer<ffi.Char> backendPath,
    ffi.Pointer<ffi.Char> modelPath,
    QnnOutputDataType outputDataType,
    QnnInputDataType inputDataType,
    ffi.Pointer<ffi.Char> dataDir,
  ) {
    return _qnn_sample_app_create(
      backendPath,
      modelPath,
      outputDataType.value,
      inputDataType.value,
      dataDir,
    );
  }

  late final _qnn_sample_app_createPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<QnnSampleApp> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedInt,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('qnn_sample_app_create');
  late final _qnn_sample_app_create =
      _qnn_sample_app_createPtr
          .asFunction<
            ffi.Pointer<QnnSampleApp> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  /// 释放 QnnSampleApp 对象
  void qnn_sample_app_destroy(ffi.Pointer<QnnSampleApp> app) {
    return _qnn_sample_app_destroy(app);
  }

  late final _qnn_sample_app_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<QnnSampleApp>)>>(
        'qnn_sample_app_destroy',
      );
  late final _qnn_sample_app_destroy =
      _qnn_sample_app_destroyPtr
          .asFunction<void Function(ffi.Pointer<QnnSampleApp>)>();

  /// 以下接口分别包装了 C++ 对象的方法，返回的状态码与 C++ 中保持一致
  QnnStatus qnn_sample_app_initialize(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_initialize(app));
  }

  late final _qnn_sample_app_initializePtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_initialize');
  late final _qnn_sample_app_initialize =
      _qnn_sample_app_initializePtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_initialize_profiling(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_initialize_profiling(app));
  }

  late final _qnn_sample_app_initialize_profilingPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_initialize_profiling');
  late final _qnn_sample_app_initialize_profiling =
      _qnn_sample_app_initialize_profilingPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_create_context(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_create_context(app));
  }

  late final _qnn_sample_app_create_contextPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_create_context');
  late final _qnn_sample_app_create_context =
      _qnn_sample_app_create_contextPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_compose_graphs(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_compose_graphs(app));
  }

  late final _qnn_sample_app_compose_graphsPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_compose_graphs');
  late final _qnn_sample_app_compose_graphs =
      _qnn_sample_app_compose_graphsPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_finalize_graphs(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_finalize_graphs(app));
  }

  late final _qnn_sample_app_finalize_graphsPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_finalize_graphs');
  late final _qnn_sample_app_finalize_graphs =
      _qnn_sample_app_finalize_graphsPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_execute_graphs(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_execute_graphs(app));
  }

  late final _qnn_sample_app_execute_graphsPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_execute_graphs');
  late final _qnn_sample_app_execute_graphs =
      _qnn_sample_app_execute_graphsPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_register_op_packages(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_register_op_packages(app));
  }

  late final _qnn_sample_app_register_op_packagesPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_register_op_packages');
  late final _qnn_sample_app_register_op_packages =
      _qnn_sample_app_register_op_packagesPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_create_from_binary(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_create_from_binary(app));
  }

  late final _qnn_sample_app_create_from_binaryPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_create_from_binary');
  late final _qnn_sample_app_create_from_binary =
      _qnn_sample_app_create_from_binaryPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_save_binary(
    ffi.Pointer<QnnSampleApp> app,
    ffi.Pointer<ffi.Char> outputPath,
    ffi.Pointer<ffi.Char> binaryName,
  ) {
    return QnnStatus.fromValue(
      _qnn_sample_app_save_binary(app, outputPath, binaryName),
    );
  }

  late final _qnn_sample_app_save_binaryPtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<QnnSampleApp>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('qnn_sample_app_save_binary');
  late final _qnn_sample_app_save_binary =
      _qnn_sample_app_save_binaryPtr
          .asFunction<
            int Function(
              ffi.Pointer<QnnSampleApp>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  QnnStatus qnn_sample_app_free_context(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_free_context(app));
  }

  late final _qnn_sample_app_free_contextPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_free_context');
  late final _qnn_sample_app_free_context =
      _qnn_sample_app_free_contextPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_terminate_backend(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_terminate_backend(app));
  }

  late final _qnn_sample_app_terminate_backendPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_terminate_backend');
  late final _qnn_sample_app_terminate_backend =
      _qnn_sample_app_terminate_backendPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_free_graphs(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_free_graphs(app));
  }

  late final _qnn_sample_app_free_graphsPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_free_graphs');
  late final _qnn_sample_app_free_graphs =
      _qnn_sample_app_free_graphsPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  /// 获取后端生成的版本号字符串。
  /// 返回的字符串由内部动态分配，调用者需要使用 free() 释放。
  ffi.Pointer<ffi.Char> qnn_sample_app_get_backend_build_id(
    ffi.Pointer<QnnSampleApp> app,
  ) {
    return _qnn_sample_app_get_backend_build_id(app);
  }

  late final _qnn_sample_app_get_backend_build_idPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<QnnSampleApp>)
    >
  >('qnn_sample_app_get_backend_build_id');
  late final _qnn_sample_app_get_backend_build_id =
      _qnn_sample_app_get_backend_build_idPtr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<QnnSampleApp>)
          >();

  QnnStatus qnn_sample_app_is_device_property_supported(
    ffi.Pointer<QnnSampleApp> app,
  ) {
    return QnnStatus.fromValue(
      _qnn_sample_app_is_device_property_supported(app),
    );
  }

  late final _qnn_sample_app_is_device_property_supportedPtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_is_device_property_supported');
  late final _qnn_sample_app_is_device_property_supported =
      _qnn_sample_app_is_device_property_supportedPtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_create_device(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_create_device(app));
  }

  late final _qnn_sample_app_create_devicePtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_create_device');
  late final _qnn_sample_app_create_device =
      _qnn_sample_app_create_devicePtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  QnnStatus qnn_sample_app_free_device(ffi.Pointer<QnnSampleApp> app) {
    return QnnStatus.fromValue(_qnn_sample_app_free_device(app));
  }

  late final _qnn_sample_app_free_devicePtr = _lookup<
    ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<QnnSampleApp>)>
  >('qnn_sample_app_free_device');
  late final _qnn_sample_app_free_device =
      _qnn_sample_app_free_devicePtr
          .asFunction<int Function(ffi.Pointer<QnnSampleApp>)>();

  /// 加载浮点数输入张量。
  /// 参数 inputs 为指向各输入数组的指针数组，sizes 为各数组元素的个数，numInputs 为输入个数，graphIdx 为图索引。
  QnnStatus qnn_sample_app_load_float_inputs(
    ffi.Pointer<QnnSampleApp> app,
    ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
    ffi.Pointer<ffi.Size> sizes,
    int numInputs,
    int graphIdx,
  ) {
    return QnnStatus.fromValue(
      _qnn_sample_app_load_float_inputs(
        app,
        inputs,
        sizes,
        numInputs,
        graphIdx,
      ),
    );
  }

  late final _qnn_sample_app_load_float_inputsPtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<QnnSampleApp>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Size>,
        ffi.Size,
        ffi.Int,
      )
    >
  >('qnn_sample_app_load_float_inputs');
  late final _qnn_sample_app_load_float_inputs =
      _qnn_sample_app_load_float_inputsPtr
          .asFunction<
            int Function(
              ffi.Pointer<QnnSampleApp>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
            )
          >();

  /// 获取浮点数输出张量。
  /// 参数 outputs 是一个输出指针，函数内部会分配内存保存各个输出数据（调用者需要对每个输出以及 outputs 数组调用 free() 释放）。
  /// out_sizes 返回各输出张量的元素个数，numOutputs 返回输出张量数量。
  QnnStatus qnn_sample_app_get_float_outputs(
    ffi.Pointer<QnnSampleApp> app,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> outputs,
    ffi.Pointer<ffi.Pointer<ffi.Size>> out_sizes,
    ffi.Pointer<ffi.Size> numOutputs,
    int graphIdx,
  ) {
    return QnnStatus.fromValue(
      _qnn_sample_app_get_float_outputs(
        app,
        outputs,
        out_sizes,
        numOutputs,
        graphIdx,
      ),
    );
  }

  late final _qnn_sample_app_get_float_outputsPtr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<QnnSampleApp>,
        ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>>,
        ffi.Pointer<ffi.Pointer<ffi.Size>>,
        ffi.Pointer<ffi.Size>,
        ffi.Int,
      )
    >
  >('qnn_sample_app_get_float_outputs');
  late final _qnn_sample_app_get_float_outputs =
      _qnn_sample_app_get_float_outputsPtr
          .asFunction<
            int Function(
              ffi.Pointer<QnnSampleApp>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>>,
              ffi.Pointer<ffi.Pointer<ffi.Size>>,
              ffi.Pointer<ffi.Size>,
              int,
            )
          >();

  /// 获取HTP架构版本号
  /// 参数 backendPath 为后端库路径
  /// 返回HTP架构版本号，如果发生错误则返回-1
  int qnn_get_htp_arch_version(ffi.Pointer<ffi.Char> backendPath) {
    return _qnn_get_htp_arch_version(backendPath);
  }

  late final _qnn_get_htp_arch_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'qnn_get_htp_arch_version',
      );
  late final _qnn_get_htp_arch_version =
      _qnn_get_htp_arch_versionPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// 异步函数声明
  void qnn_sample_app_create_async(
    ffi.Pointer<ffi.Char> backendPath,
    ffi.Pointer<ffi.Char> modelPath,
    QnnOutputDataType outputDataType,
    QnnInputDataType inputDataType,
    ffi.Pointer<ffi.Char> dataDir,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<QnnSampleApp> app,
          ffi.Pointer<ffi.Void> userData,
        )
      >
    >
    callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_create_async(
      backendPath,
      modelPath,
      outputDataType.value,
      inputDataType.value,
      dataDir,
      callback,
      userData,
    );
  }

  late final _qnn_sample_app_create_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedInt,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Void Function(
              ffi.Pointer<QnnSampleApp> app,
              ffi.Pointer<ffi.Void> userData,
            )
          >
        >,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_create_async');
  late final _qnn_sample_app_create_async =
      _qnn_sample_app_create_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Void Function(
                    ffi.Pointer<QnnSampleApp> app,
                    ffi.Pointer<ffi.Void> userData,
                  )
                >
              >,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_destroy_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_destroy_async(app, callback, userData);
  }

  late final _qnn_sample_app_destroy_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_destroy_async');
  late final _qnn_sample_app_destroy_async =
      _qnn_sample_app_destroy_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_initialize_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_initialize_async(app, callback, userData);
  }

  late final _qnn_sample_app_initialize_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_initialize_async');
  late final _qnn_sample_app_initialize_async =
      _qnn_sample_app_initialize_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_initialize_profiling_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_initialize_profiling_async(app, callback, userData);
  }

  late final _qnn_sample_app_initialize_profiling_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_initialize_profiling_async');
  late final _qnn_sample_app_initialize_profiling_async =
      _qnn_sample_app_initialize_profiling_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_create_context_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_create_context_async(app, callback, userData);
  }

  late final _qnn_sample_app_create_context_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_create_context_async');
  late final _qnn_sample_app_create_context_async =
      _qnn_sample_app_create_context_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_compose_graphs_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_compose_graphs_async(app, callback, userData);
  }

  late final _qnn_sample_app_compose_graphs_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_compose_graphs_async');
  late final _qnn_sample_app_compose_graphs_async =
      _qnn_sample_app_compose_graphs_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_finalize_graphs_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_finalize_graphs_async(app, callback, userData);
  }

  late final _qnn_sample_app_finalize_graphs_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_finalize_graphs_async');
  late final _qnn_sample_app_finalize_graphs_async =
      _qnn_sample_app_finalize_graphs_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_execute_graphs_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_execute_graphs_async(app, callback, userData);
  }

  late final _qnn_sample_app_execute_graphs_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_execute_graphs_async');
  late final _qnn_sample_app_execute_graphs_async =
      _qnn_sample_app_execute_graphs_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_register_op_packages_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_register_op_packages_async(app, callback, userData);
  }

  late final _qnn_sample_app_register_op_packages_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_register_op_packages_async');
  late final _qnn_sample_app_register_op_packages_async =
      _qnn_sample_app_register_op_packages_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_create_from_binary_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_create_from_binary_async(app, callback, userData);
  }

  late final _qnn_sample_app_create_from_binary_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_create_from_binary_async');
  late final _qnn_sample_app_create_from_binary_async =
      _qnn_sample_app_create_from_binary_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_save_binary_async(
    ffi.Pointer<QnnSampleApp> app,
    ffi.Pointer<ffi.Char> outputPath,
    ffi.Pointer<ffi.Char> binaryName,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_save_binary_async(
      app,
      outputPath,
      binaryName,
      callback,
      userData,
    );
  }

  late final _qnn_sample_app_save_binary_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_save_binary_async');
  late final _qnn_sample_app_save_binary_async =
      _qnn_sample_app_save_binary_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_free_context_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_free_context_async(app, callback, userData);
  }

  late final _qnn_sample_app_free_context_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_free_context_async');
  late final _qnn_sample_app_free_context_async =
      _qnn_sample_app_free_context_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_terminate_backend_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_terminate_backend_async(app, callback, userData);
  }

  late final _qnn_sample_app_terminate_backend_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_terminate_backend_async');
  late final _qnn_sample_app_terminate_backend_async =
      _qnn_sample_app_terminate_backend_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_free_graphs_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_free_graphs_async(app, callback, userData);
  }

  late final _qnn_sample_app_free_graphs_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_free_graphs_async');
  late final _qnn_sample_app_free_graphs_async =
      _qnn_sample_app_free_graphs_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_get_backend_build_id_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnStringCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_get_backend_build_id_async(app, callback, userData);
  }

  late final _qnn_sample_app_get_backend_build_id_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnStringCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_get_backend_build_id_async');
  late final _qnn_sample_app_get_backend_build_id_async =
      _qnn_sample_app_get_backend_build_id_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnStringCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_is_device_property_supported_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_is_device_property_supported_async(
      app,
      callback,
      userData,
    );
  }

  late final _qnn_sample_app_is_device_property_supported_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_is_device_property_supported_async');
  late final _qnn_sample_app_is_device_property_supported_async =
      _qnn_sample_app_is_device_property_supported_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_create_device_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_create_device_async(app, callback, userData);
  }

  late final _qnn_sample_app_create_device_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_create_device_async');
  late final _qnn_sample_app_create_device_async =
      _qnn_sample_app_create_device_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_free_device_async(
    ffi.Pointer<QnnSampleApp> app,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_free_device_async(app, callback, userData);
  }

  late final _qnn_sample_app_free_device_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_free_device_async');
  late final _qnn_sample_app_free_device_async =
      _qnn_sample_app_free_device_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_load_float_inputs_async(
    ffi.Pointer<QnnSampleApp> app,
    ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
    ffi.Pointer<ffi.Size> sizes,
    int numInputs,
    int graphIdx,
    QnnAsyncCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_load_float_inputs_async(
      app,
      inputs,
      sizes,
      numInputs,
      graphIdx,
      callback,
      userData,
    );
  }

  late final _qnn_sample_app_load_float_inputs_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Size>,
        ffi.Size,
        ffi.Int,
        QnnAsyncCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_load_float_inputs_async');
  late final _qnn_sample_app_load_float_inputs_async =
      _qnn_sample_app_load_float_inputs_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              QnnAsyncCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_sample_app_get_float_outputs_async(
    ffi.Pointer<QnnSampleApp> app,
    int graphIdx,
    QnnFloatOutputCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_sample_app_get_float_outputs_async(
      app,
      graphIdx,
      callback,
      userData,
    );
  }

  late final _qnn_sample_app_get_float_outputs_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<QnnSampleApp>,
        ffi.Int,
        QnnFloatOutputCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_sample_app_get_float_outputs_async');
  late final _qnn_sample_app_get_float_outputs_async =
      _qnn_sample_app_get_float_outputs_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<QnnSampleApp>,
              int,
              QnnFloatOutputCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();

  void qnn_get_htp_arch_version_async(
    ffi.Pointer<ffi.Char> backendPath,
    QnnArchVersionCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _qnn_get_htp_arch_version_async(backendPath, callback, userData);
  }

  late final _qnn_get_htp_arch_version_asyncPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Char>,
        QnnArchVersionCallback,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('qnn_get_htp_arch_version_async');
  late final _qnn_get_htp_arch_version_async =
      _qnn_get_htp_arch_version_asyncPtr
          .asFunction<
            void Function(
              ffi.Pointer<ffi.Char>,
              QnnArchVersionCallback,
              ffi.Pointer<ffi.Void>,
            )
          >();
}

/// 定义状态码，和 C++ 中 sample_app::StatusCode 保持一致
enum QnnStatus {
  QNN_STATUS_SUCCESS(0),
  QNN_STATUS_FAILURE(1),
  QNN_STATUS_FAILURE_INPUT_LIST_EXHAUSTED(2),
  QNN_STATUS_FAILURE_SYSTEM_ERROR(3),
  QNN_STATUS_FAILURE_SYSTEM_COMMUNICATION_ERROR(4),
  QNN_STATUS_FEATURE_UNSUPPORTED(5);

  final int value;
  const QnnStatus(this.value);

  static QnnStatus fromValue(int value) => switch (value) {
    0 => QNN_STATUS_SUCCESS,
    1 => QNN_STATUS_FAILURE,
    2 => QNN_STATUS_FAILURE_INPUT_LIST_EXHAUSTED,
    3 => QNN_STATUS_FAILURE_SYSTEM_ERROR,
    4 => QNN_STATUS_FAILURE_SYSTEM_COMMUNICATION_ERROR,
    5 => QNN_STATUS_FEATURE_UNSUPPORTED,
    _ => throw ArgumentError("Unknown value for QnnStatus: $value"),
  };
}

/// 定义输出数据类型
enum QnnOutputDataType {
  QNN_OUTPUT_DATA_TYPE_FLOAT_ONLY(0),
  QNN_OUTPUT_DATA_TYPE_NATIVE_ONLY(1),
  QNN_OUTPUT_DATA_TYPE_FLOAT_AND_NATIVE(2),
  QNN_OUTPUT_DATA_TYPE_INVALID(3);

  final int value;
  const QnnOutputDataType(this.value);

  static QnnOutputDataType fromValue(int value) => switch (value) {
    0 => QNN_OUTPUT_DATA_TYPE_FLOAT_ONLY,
    1 => QNN_OUTPUT_DATA_TYPE_NATIVE_ONLY,
    2 => QNN_OUTPUT_DATA_TYPE_FLOAT_AND_NATIVE,
    3 => QNN_OUTPUT_DATA_TYPE_INVALID,
    _ => throw ArgumentError("Unknown value for QnnOutputDataType: $value"),
  };
}

/// 定义输入数据类型
enum QnnInputDataType {
  QNN_INPUT_DATA_TYPE_FLOAT(0),
  QNN_INPUT_DATA_TYPE_NATIVE(1),
  QNN_INPUT_DATA_TYPE_INVALID(2);

  final int value;
  const QnnInputDataType(this.value);

  static QnnInputDataType fromValue(int value) => switch (value) {
    0 => QNN_INPUT_DATA_TYPE_FLOAT,
    1 => QNN_INPUT_DATA_TYPE_NATIVE,
    2 => QNN_INPUT_DATA_TYPE_INVALID,
    _ => throw ArgumentError("Unknown value for QnnInputDataType: $value"),
  };
}

/// 定义HTP精度模式
enum QnnHtpPrecisionMode {
  QNN_HTP_PRECISION_MODE_FLOAT32(0),
  QNN_HTP_PRECISION_MODE_FLOAT16(1),
  QNN_HTP_PRECISION_MODE_DEFAULT(2147483647);

  final int value;
  const QnnHtpPrecisionMode(this.value);

  static QnnHtpPrecisionMode fromValue(int value) => switch (value) {
    0 => QNN_HTP_PRECISION_MODE_FLOAT32,
    1 => QNN_HTP_PRECISION_MODE_FLOAT16,
    2147483647 => QNN_HTP_PRECISION_MODE_DEFAULT,
    _ => throw ArgumentError("Unknown value for QnnHtpPrecisionMode: $value"),
  };
}

/// 定义HTP后端配置结构体
final class QnnBackendHtpConfig extends ffi.Struct {
  /// 优化级别(0-3)，3为最佳性能
  @ffi.Int()
  external int optimizationLevel;

  /// 精度模式
  @ffi.UnsignedInt()
  external int precisionMode;
}

final class QnnSampleApp extends ffi.Opaque {}

/// 定义异步回调函数类型
typedef QnnAsyncCallback =
    ffi.Pointer<ffi.NativeFunction<QnnAsyncCallbackFunction>>;
typedef QnnAsyncCallbackFunction =
    ffi.Void Function(ffi.UnsignedInt status, ffi.Pointer<ffi.Void> userData);
typedef DartQnnAsyncCallbackFunction =
    void Function(QnnStatus status, ffi.Pointer<ffi.Void> userData);
typedef QnnStringCallback =
    ffi.Pointer<ffi.NativeFunction<QnnStringCallbackFunction>>;
typedef QnnStringCallbackFunction =
    ffi.Void Function(
      ffi.UnsignedInt status,
      ffi.Pointer<ffi.Char> result,
      ffi.Pointer<ffi.Void> userData,
    );
typedef DartQnnStringCallbackFunction =
    void Function(
      QnnStatus status,
      ffi.Pointer<ffi.Char> result,
      ffi.Pointer<ffi.Void> userData,
    );

/// 结果回调，用于带返回数据的异步函数
typedef QnnFloatOutputCallback =
    ffi.Pointer<ffi.NativeFunction<QnnFloatOutputCallbackFunction>>;
typedef QnnFloatOutputCallbackFunction =
    ffi.Void Function(
      ffi.UnsignedInt status,
      ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
      ffi.Pointer<ffi.Size> sizes,
      ffi.Size numOutputs,
      ffi.Pointer<ffi.Void> userData,
    );
typedef DartQnnFloatOutputCallbackFunction =
    void Function(
      QnnStatus status,
      ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
      ffi.Pointer<ffi.Size> sizes,
      int numOutputs,
      ffi.Pointer<ffi.Void> userData,
    );
typedef QnnArchVersionCallback =
    ffi.Pointer<ffi.NativeFunction<QnnArchVersionCallbackFunction>>;
typedef QnnArchVersionCallbackFunction =
    ffi.Void Function(ffi.Int version, ffi.Pointer<ffi.Void> userData);
typedef DartQnnArchVersionCallbackFunction =
    void Function(int version, ffi.Pointer<ffi.Void> userData);
